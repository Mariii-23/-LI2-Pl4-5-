<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="listas_8h" kind="file" language="C++">
    <compoundname>listas.h</compoundname>
    <includes refid="dados_8h" local="yes">dados.h</includes>
    <includedby refid="_melhor___jogada_8h" local="yes">Melhor_Jogada.h</includedby>
    <includedby refid="listas_8c" local="yes">listas.c</includedby>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <includedby refid="_melhor___jogada_8c" local="yes">Melhor_Jogada.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>dados.h</label>
        <link refid="dados_8h_source"/>
      </node>
      <node id="1">
        <label>listas.h</label>
        <link refid="listas_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>Melhor_Jogada.h</label>
        <link refid="_melhor___jogada_8h_source"/>
      </node>
      <node id="1">
        <label>listas.h</label>
        <link refid="listas_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structlista" prot="public">lista</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="listas_8h_1a6821bafc3c88dfb2e433a095df9940c6" prot="public" static="no">
        <name>BUF_SIZE</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="8" column="17" bodyfile="listas.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="listas_8h_1ac294034fbe3bf9846e0465051a477f55" prot="public" static="no">
        <type>struct <ref refid="structlista" kindref="compound">lista</ref> *</type>
        <definition>typedef struct lista * LISTA</definition>
        <argsstring></argsstring>
        <name>LISTA</name>
        <briefdescription>
<para>Tipo de dados para listas. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="20" column="8"/>
      </memberdef>
      <memberdef kind="typedef" id="listas_8h_1a28674c2740355ab456340e8d5ebda659" prot="public" static="no">
        <type>struct <ref refid="structlista" kindref="compound">lista</ref></type>
        <definition>typedef struct lista NLista</definition>
        <argsstring></argsstring>
        <name>NLista</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="20" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="listas_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
<para>Função que cria uma lista vazia. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="22" column="7" bodyfile="listas.c" bodystart="28" bodyend="31" declfile="listas.h" declline="22" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA insere_cabeca</definition>
        <argsstring>(LISTA L, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Função que insere um valor na cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="23" column="7" bodyfile="listas.c" bodystart="44" bodyend="52" declfile="listas.h" declline="23" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1abfcb205f3eb670157be0d1221021714b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que devolve a cabeça de uma lista dada. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="24" column="6" bodyfile="listas.c" bodystart="57" bodyend="61" declfile="listas.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1ad9380152361127432c55c1c6067e05ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que devolve a cauda de uma lista dada. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="25" column="7" bodyfile="listas.c" bodystart="66" bodyend="69" declfile="listas.h" declline="25" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1a9026a681a68322b5ec7f07137b864cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA remove_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que remove a cabeça de uma lista da lista, devolvendo a sua cauda. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="26" column="7" bodyfile="listas.c" bodystart="74" bodyend="80" declfile="listas.h" declline="26" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que devolve 1 se a lista dada estiver vazia. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="27" column="5" bodyfile="listas.c" bodystart="36" bodyend="39" declfile="listas.h" declline="27" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1ac5220e010f7f7d55acdb0cb1af90c729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_lista</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>free_lista</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
          <defname>lista</defname>
        </param>
        <briefdescription>
<para>LISTAS ///. </para>
        </briefdescription>
        <detaileddescription>
<para>Função que liberta o espaco de memoria ocupado pela lista. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="28" column="6" bodyfile="listas.c" bodystart="14" bodyend="23" declfile="listas.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1ad32711832cbbeee1856c0f4083633ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA adiciona_lista</definition>
        <argsstring>(LISTA lista, ESTADO *estado, COORDENADA coord)</argsstring>
        <name>adiciona_lista</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>lista</declname>
        </param>
        <param>
          <type><ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref> *</type>
          <declname>estado</declname>
        </param>
        <param>
          <type><ref refid="struct_c_o_o_r_d_e_n_a_d_a" kindref="compound">COORDENADA</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
<para>LISTA DE COORDENADAS POSSÍVEIS A SEREM EXECUTADAS ///. </para>
        </briefdescription>
        <detaileddescription>
<para>Função auxiliar que insere a coordenada na lista se esta for uma possível coordenada a ser efetuada. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="29" column="7" bodyfile="listas.c" bodystart="87" bodyend="99" declfile="listas.h" declline="29" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="listas_8h_1a7ed8fc0ae2aa652181646e50cb8519b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA cria_lista_coords_possiveis</definition>
        <argsstring>(ESTADO *estado)</argsstring>
        <name>cria_lista_coords_possiveis</name>
        <param>
          <type><ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref> *</type>
          <declname>estado</declname>
        </param>
        <briefdescription>
<para>Função principal que returna uma LISTA de coordenadas possíveis a serem efetuadas. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.h" line="30" column="7" bodyfile="listas.c" bodystart="104" bodyend="127" declfile="listas.h" declline="30" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>___LISTAS___</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>___LISTAS___</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUF_SIZE<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dados.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="structlista" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlista" kindref="compound">lista</ref><sp/>{</highlight></codeline>
<codeline lineno="17" refid="structlista_1a1851230b0237deef0519ee33de9f2dd0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structlista_1a1851230b0237deef0519ee33de9f2dd0" kindref="member">valor</ref>;</highlight></codeline>
<codeline lineno="19" refid="structlista_1a03e6d0ed2ba4b439580ef0dcdb0b20c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlista" kindref="compound">lista</ref><sp/>*<ref refid="structlista_1a03e6d0ed2ba4b439580ef0dcdb0b20c4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}<sp/>*<ref refid="structlista" kindref="compound">LISTA</ref>,<sp/><ref refid="structlista" kindref="compound">NLista</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>criar_lista();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>insere_cabeca(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>L,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structlista_1a1851230b0237deef0519ee33de9f2dd0" kindref="member">valor</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*devolve_cabeca(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>L);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>proximo(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>L);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>remove_cabeca(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>L);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lista_esta_vazia(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>L);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_lista(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>L);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>adiciona_lista(<ref refid="structlista" kindref="compound">LISTA</ref><sp/><ref refid="structlista" kindref="compound">lista</ref>,<sp/><ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref><sp/>*estado,<sp/><ref refid="struct_c_o_o_r_d_e_n_a_d_a" kindref="compound">COORDENADA</ref><sp/>coord);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>cria_lista_coords_possiveis(<ref refid="struct_e_s_t_a_d_o" kindref="compound">ESTADO</ref><sp/>*estado);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="listas.h"/>
  </compounddef>
</doxygen>
